@model BugTracker.Models.DashboardViewModel

@{
    ViewBag.Title = "Home Page";
}

<div class="col-lg-12 col-sm-12">
    <h1>Welcome @Model.CurrentUser.FullName!</h1>
    <h3 class="text-muted">
        Role: @foreach (var role in Model.UserRole)
        {
            @role
        }
    </h3>
</div>
@if (User.IsInRole("Admin"))
{
    <div class="row">
        @if (Model.ChartJsLables != null && Model.ChartJsValues != null)
        {
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Tickets Per Project</h4>
                </div>
                <div class="card-content">
                    <div class="chart-container" style="position: relative; height: 30vh;">
                        <canvas id="chartjsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        }
        @if (Model.TicketStatusChart != null)
        {
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Tickets Per Status</h4>
                </div>
                <div class="card-content">
                    <div class="chart-container" style="position: relative;">
                        <canvas id="ticket-status-chart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        }
        @if (Model.TicketStatusLineChart != null)
        {
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Opened vs Resolved for All Projects</h4>
                </div>
                <div class="card-content">
                    <div class="chart-container" style="position: relative;">
                        <canvas id="openedVsResolved"></canvas>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
}

@if (User.IsInRole("ProjectManager"))
{
    <div class="row">
        @if (Model.LineCharts != null)
        {
            foreach (var chart in Model.LineCharts)
            {
                <div class="col-md-4">
                    <h3>@chart.ProjectName</h3>
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Opened vs Resolved</h4>
                        </div>
                        <div class="card-content">
                            <div class="chart-container" style="position: relative; min-height: 30vh">
                                <canvas id="@chart.ProjectId"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    </div>
    <div class="row">
        @if (Model.DonutCharts != null)
        {
            foreach (var chart in Model.DonutCharts)
            {
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Tickets Per Status (@chart.ProjectName)</h4>
                        </div>
                        <div class="card-content">
                            <div class="chart-container" style="position: relative;">
                                <canvas id="@String.Format("{0}{1}", chart.ProjectId, "donut")"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}


<div class="row">
    @if (Model.Assigned.Count() > 0 && Model.Assigned != null)
    {
        <div class="col-lg-12 col-sm-12">
            <h4>Projects</h4>
        </div>
        <div class="col-lg-3 col-sm-6">
            <div class="card">
                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-5">
                            <div class="icon-big icon-warning text-center">
                                <i class="ti-package"></i>
                            </div>
                        </div>
                        <div class="col-xs-7">
                            <div class="numbers">
                                <p>Assigned</p>
                                @Model.Assigned.Count()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    @if (Request.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("ProjectManager")))
    {
        <div class="col-lg-3 col-sm-6">
            <div class="card">
                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-5">
                            <div class="icon-big icon-success text-center">
                                <i class="ti-package"></i>
                            </div>
                        </div>
                        <div class="col-xs-7">
                            <div class="numbers">
                                <p>All</p>
                                @Model.All.Count()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="row">
    <div class="col-lg-12 col-sm-12">
        <h4>Tickets</h4>
    </div>
    @if (Request.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("ProjectManager")))
    {
        if (Model.AllTickets.Count() > 0 && Model.AllTickets != null)
        {
            <div class="col-lg-3 col-sm-6">
                <div class="card">
                    <div class="card-content">
                        <div class="row">
                            <div class="col-xs-5">
                                <div class="icon-big icon-success text-center">
                                    <i class="ti-receipt"></i>
                                </div>
                            </div>
                            <div class="col-xs-7">
                                <div class="numbers">
                                    <p>All</p>
                                    @Model.AllTickets.Count()
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        if (Model.PmUnassignedTicketsCount != "0" && Model.PmUnassignedTicketsCount != null)
        {
            <div class="col-lg-3 col-sm-6">
                <div class="card">
                    <div class="card-content">
                        <div class="row">
                            <div class="col-xs-5">
                                <div class="icon-big icon-danger text-center">
                                    <i class="ti-receipt"></i>
                                </div>
                            </div>
                            <div class="col-xs-7">
                                <div class="numbers">
                                    <p>Unassigned in Projects I'm assigned to</p>
                                    @Model.PmUnassignedTicketsCount
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        if (User.IsInRole("Admin"))
        {
            if (Model.AdminUnassignedTicketsCount != "0" && Model.AdminUnassignedTicketsCount != null)
            {
                <div class="col-lg-3 col-sm-6">
                    <div class="card">
                        <div class="card-content">
                            <div class="row">
                                <div class="col-xs-5">
                                    <div class="icon-big icon-danger text-center">
                                        <i class="ti-receipt"></i>
                                    </div>
                                </div>
                                <div class="col-xs-7">
                                    <div class="numbers">
                                        <p>All Unassigned </p>
                                        @Model.AdminUnassignedTicketsCount
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    }
    @if (Model.MyTickets != null && Model.MyTickets.Count() > 0)
    {
        <div class="col-lg-3 col-sm-6">
            <div class="card">
                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-5">
                            <div class="icon-big icon-warning text-center">
                                <i class="ti-receipt"></i>
                            </div>
                        </div>
                        <div class="col-xs-7">
                            <div class="numbers">
                                <p>In Assigned Projects</p>
                                @Model.MyTickets.Count()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Request.IsAuthenticated && (User.IsInRole("Developer")) && Model.DevTicketsCount != null && Model.DevTicketsCount != "0")
    {
        <div class="col-lg-3 col-sm-6">
            <div class="card">
                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-5">
                            <div class="icon-big icon-success text-center">
                                <i class="ti-receipt"></i>
                            </div>
                        </div>
                        <div class="col-xs-7">
                            <div class="numbers">
                                <p>Assigned</p>
                                @Model.DevTicketsCount
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (Request.IsAuthenticated && (User.IsInRole("Submitter")) && Model.SubmitterTicketsCount != null && Model.SubmitterTicketsCount != "0")
    {
        <div class="col-lg-3 col-sm-6">
            <div class="card">
                <div class="card-content">
                    <div class="row">
                        <div class="col-xs-5">
                            <div class="icon-big icon-success text-center">
                                <i class="ti-receipt"></i>
                            </div>
                        </div>
                        <div class="col-xs-7">
                            <div class="numbers">
                                <p>I Submitted</p>
                                @Model.SubmitterTicketsCount
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @if (Model.ChartJsLables != null && Model.ChartJsValues != null)
    {
        <script type="text/javascript">
        var ctx = $('#chartjsChart');

        var chart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: @Html.Raw(Json.Encode(Model.ChartJsValues)),
                    backgroundColor: [
                        '#7A9E9F',
                        '#6A8E9F',
                        '#5A7E9F',
                        '#4A6E9F',
                        '#3A5E9F',
                        '#2A4E9F',
                        '#1A3E9F'
                    ],
                    label: 'Projects'
                }],
                labels: @Html.Raw(Json.Encode(Model.ChartJsLables))
            },
            options: {
                responsive: true,
                legend: {
                    position: 'top',
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                },
                maintainAspectRatio: false
            }
        });
        </script>
    }
    @if (Model.TicketStatusChart != null)
    {
        <script type="text/javascript">
        var ctx = $('#ticket-status-chart');
        var chart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: @Html.Raw(Json.Encode(Model.TicketStatusChart.Values)),
                    backgroundColor: [
                        '#7A9E9F',
                        '#EB5E28',
                        '#F3BB45',
                        '#66615B'
                    ],
                    label: 'Dataset 1'
                }],
                labels: @Html.Raw(Json.Encode(Model.TicketStatusChart.Labels))
            },
            options: {
                responsive: true,
                legend: {
                    position: 'top',
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                },
                maintainAspectRatio: false
            }
        });
        </script>
    }
    @if (Model.DonutCharts != null)
    {
        foreach (var chart in Model.DonutCharts)
        {
            <script type="text/javascript">
        var ctx = $('@String.Format("{0}{1}{2}", "#", chart.ProjectId, "donut")');
        var chart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: @Html.Raw(Json.Encode(chart.Values)),
                    backgroundColor: [
                        '#7A9E9F',
                        '#EB5E28',
                        '#F3BB45',
                        '#66615B'
                    ],
                    label: 'Dataset 1'
                }],
                labels: @Html.Raw(Json.Encode(chart.Labels))
            },
            options: {
                responsive: true,
                legend: {
                    position: 'top',
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                },
                maintainAspectRatio: false
            }
        });
            </script>
        }
    }

    @if (Model.TicketStatusLineChart != null)
    {
        <script>
                            new Chart(document.getElementById("openedVsResolved"), {
            type: 'line',
            data: {
                                labels: @Html.Raw(Json.Encode(Model.TicketStatusLineChart.Dates)),
                datasets: [{
                                    data: @Html.Raw(Json.Encode(Model.TicketStatusLineChart.Resolved)),
                    label: "Closed",
                    backgroundColor: '#7AC29A',
                    borderColor: "#7AC29A",
                    fill: false
                }, {
                                    data: @Html.Raw(Json.Encode(Model.TicketStatusLineChart.Opened)),
                    label: "Opened All Time",
                    borderColor: "#66615B",
                    backgroundColor: '#66615B',
                    fill: false
                }]
            }
                });
        </script>
    }

    @if (User.IsInRole("ProjectManager"))
    {
        if (Model.LineCharts != null)
        {
            foreach (var chart in Model.LineCharts)
            {
                <script>
                        new Chart(document.getElementById(@chart.ProjectId), {
                        type: 'line',
                        data: {
                        labels: @Html.Raw(Json.Encode(chart.Dates)),
                        datasets: [{
                        data: @Html.Raw(Json.Encode(chart.Resolved)),
                        label: "Closed",
                        backgroundColor: '#7AC29A',
                        borderColor: "#7AC29A",
                        fill: false
                }, {
                        data: @Html.Raw(Json.Encode(chart.Opened)),
                        label: "Opened All Time",
                        borderColor: "#66615B",
                        backgroundColor: '#66615B',
                        fill: false
                }]
            }
        });
                </script>
            }
        }
    }
}